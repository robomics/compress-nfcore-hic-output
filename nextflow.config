// Copyright (C) 2023 Roberto Rossini <roberros@uio.no>
//
// SPDX-License-Identifier: MIT

params {
    nfcore_hic_outdir      = null  // Path to nfcore/hic v2 output dir
    outdir                 = 'results/'

    fasta                  = null  // Path to the reference genome in FASTA format (can be compressed)

    embed_ref_genome       = true
    xz_args                = '-9 --extreme'

    publish_dir_mode       = 'copy'
}

includeConfig 'config/base.config'

process {
    container = 'ghcr.io/robomics/compress-nfcore-hic-output/xz:5.8.1'
    withName: 'SAMTOOLS' {
        container = 'ghcr.io/robomics/compress-nfcore-hic-output/samtools:1.22.1'
    }

    withName: 'BAM2CRAM:SAMTOOLS' {
        cpus   = { check_max( 8, 'cpus'                      ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    }

    withName: 'COMPRESS_VALIDPAIRS:XZ' {
        cpus   = { check_max( 32, 'cpus'                     ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
    }
}

// Function to ensure that resource requirements don't go beyond a maximum limit
// Source: https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
